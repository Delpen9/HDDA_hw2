************* Module edge_detection_sobel
problem2/edge_detection_sobel.py:1:0: C0114: Missing module docstring (missing-module-docstring)
************* Module edge_detection_laplacian
problem2/edge_detection_laplacian.py:1:0: C0114: Missing module docstring (missing-module-docstring)
************* Module edge_detection_prewitt
problem2/edge_detection_prewitt.py:1:0: C0114: Missing module docstring (missing-module-docstring)
************* Module edge_detection_difference_of_gaussians
problem2/edge_detection_difference_of_gaussians.py:1:0: C0114: Missing module docstring (missing-module-docstring)
problem2/edge_detection_difference_of_gaussians.py:1:0: R0801: Similar lines in 2 files
==edge_detection_prewitt:[29:70]
==edge_detection_sobel:[20:61]
    gradient_magnitude = cv2.normalize(gradient_magnitude, None, 0, 255, cv2.NORM_MINMAX, cv2.CV_8U)

    return gradient_magnitude

def threshold_gradient_sobel(
    image : np.ndarray,
    threshold : np.ndarray
) -> np.ndarray:
    '''
    Applies a threshold to the gradient magnitude of an image.

    Parameters:
        image (ndarray): the gradient magnitude image
        threshold (int): the threshold value (0-255)

    Returns:
        ndarray: the thresholded gradient magnitude image
    '''
    assert threshold >= 0
    assert threshold <= 255

    _, thresholded_image = cv2.threshold(image, threshold, 255, cv2.THRESH_BINARY)
    return thresholded_image

def sobel_edge_detection(
    image: np.ndarray,
    threshold : int = 150
) -> np.ndarray:
    '''
    Creates a gradient magnitude and then applies a threshold to the gradient magnitude of an image.

    Parameters:
        image (ndarray): the gradient magnitude image
        threshold (int): the threshold value (0-255)

    Returns:
        ndarray: the thresholded gradient magnitude image
    '''
    assert threshold >= 0
    assert threshold <= 255
 (duplicate-code)

------------------------------------------------------------------
Your code has been rated at 9.17/10 (previous run: 8.33/10, +0.83)

